%{
#include <iostream>
#include <string>
#include "naturaldeduction.hpp"

#define YYDEBUG 1 // for debugging

using namespace std;

// Error handling
void yyerror(Formula & formula, const string message) {
  cerr << message << endl;
  exit(EXIT_FAILURE);
}

// Lexical analyzer
extern int yylex();
  
%}

// Union for representing attribute type for tokens and expressions
%union {
  string * s;
  Formula * f = new Formula();
}

// Defining tokens
%token <s> atom_token
%token not_token
%token true_token
%token false_token

// Expression attribute
%type <f> E

// Operators precedence and associativity
%right iff_token
%right imp_token
%left or_token 
%left and_token
%right NOT

%parse-param { Formula & formula }

%%
Program: Formula '\n' Program
| 
;

Formula: E                { formula = *$1; return 0; }
;

E : E and_token E         { $$ = new Formula(make_shared<And>(*$1, *$3)); } 
| E or_token E            { $$ = new Formula(make_shared<Or>(*$1, *$3)); }
| E imp_token E           { $$ = new Formula(make_shared<Imp>(*$1, *$3)); }
// converting A <=> B to (A => B) /\ (B => A)
| E iff_token E           { $$ = new Formula(make_shared<Iff>(*$1, *$3)->simplify()); }
| not_token E %prec NOT   { $$ = new Formula(make_shared<Not>(*$2)); }
| '(' E ')'               { $$ = $2; }
| atom_token              { $$ = new Formula(make_shared<Atom>(*$1)); }
| true_token              { $$ = new Formula(make_shared<True>()); }
| false_token             { $$ = new Formula(make_shared<False>()); }
;

%%

// Function for parsing formula
Formula parseFormula() {
  Formula f;
  yyparse(f);

  return f;
}

// Function for clearing input buffer
void clearInputBuffer() {
  cin.clear();
  cin.ignore();
}

// Function for switching goal with subgoals
void switchGoals(Goals & goals, const vector<Goal> & subgoals) {
  if(subgoals.size() > 0) {
    goals.pop_front();
    for(int j = subgoals.size() - 1; j >= 0; j--)
      goals.push_front(subgoals[j]);
  };
}

int main () {
  // yydebug = 1;
  Goals goals;
  bool exit = false;
  int ruleNumber;

  string rules = "Select rule to apply (-1 to exit):\n";
  rules += "0. Assumption\n";
  rules += "1. NotI\n";
  rules += "2. NotE\n";
  rules += "3. ConjI\n";
  rules += "4. ConjE1\n";
  rules += "5. ConjE2\n";
  rules += "6. ConjE\n";
  rules += "7. DisjI1\n";
  rules += "8. DisjI2\n";
  rules += "9. DisjE\n";
  rules += "10. ImpI\n";
  rules += "11. ImpE\n";
  rules += "12. FalseE\n";
  rules += "13. TrueI\n";
  rules += "14. ExcludedMiddle\n";
  rules += "15. DoubleNegationI\n";
  rules += "16. DoubleNegationE\n";
  rules += "17. Contradiction\n";

  string invalidRuleNumber = "Please select a valid rule number (between 0 and 17), or -1 to exit";

  cout << "Enter formula:" << endl;
  Formula f = parseFormula();

  goals.push_back(make_pair(vector<Formula>(), f));

  while(goals.size() > 0 && !exit) {
    cout << goals << endl;
    cout << rules << endl;
    cin >> ruleNumber;
    if(cin.fail()) {
      cout << invalidRuleNumber << endl;
      clearInputBuffer();
    }
    else {
      while(ruleNumber < -1 || ruleNumber > 17) {
        cout << invalidRuleNumber << endl;
        cout << goals << endl;
        cout << rules << endl;
        cin >> ruleNumber;
        if(cin.fail()) {
          cout << invalidRuleNumber << endl;
          clearInputBuffer();
        };
      };

      vector<Goal> subgoals;

      switch(ruleNumber) {
        case -1:
          exit = true;
          break;
        case 0:
          cout << "Applying rule: Assumption" << endl;
          if(applyAssumption(goals[0]))
            goals.pop_front();
          break;
        case 1:
          cout << "Applying rule: NotI" << endl;
          applyNotI(goals[0]);
          break;
        case 2:
          cout << "Applying rule: NotE" << endl;
          applyNotE(goals[0]);
          break;
        case 3:
          cout << "Applying rule: ConjI" << endl;
          subgoals.clear();
          applyConjI(goals[0], subgoals);
          switchGoals(goals, subgoals);
          break;
        case 4:
          cout << "Applying rule: ConjE1" << endl;
          applyConjE1(goals[0]);
          break;
        case 5:
          cout << "Applying rule: ConjE2" << endl;
          applyConjE2(goals[0]);
          break;
        case 6:
          cout << "Applying rule: ConjE" << endl;
          applyConjE(goals[0]);
          break;
        case 7:
          cout << "Applying rule: DisjI1" << endl;
          applyDisjI1(goals[0]);
          break;
        case 8:
          cout << "Applying rule: DisjI2" << endl;
          applyDisjI2(goals[0]);
          break;
        case 9:
          cout << "Applying rule: DisjE" << endl;
          subgoals.clear();
          applyDisjE(goals[0], subgoals);
          switchGoals(goals, subgoals);
          break;
        case 10:
          cout << "Applying rule: ImpI" << endl;
          applyImpI(goals[0]);
          break;
        case 11:
          cout << "Applying rule: ImpE" << endl;
          subgoals.clear();
          applyImpE(goals[0], subgoals);
          switchGoals(goals, subgoals);
          break;
        case 12:
          cout << "Applying rule: FalseE" << endl;
          applyFalseE(goals[0]);
          break;
        case 13:
          cout << "Applying rule: TrueI" << endl;
          if(applyTrueI(goals[0]))
            goals.pop_front();
          break;
        case 14:
          cout << "Applying rule: ExcludedMiddle" << endl;
          if(applyExcludedMiddle(goals[0]))
            goals.pop_front();
          break;
        case 15:
          cout << "Applying rule: DoubleNegationI" << endl;
          applyDoubleNegationI(goals[0]);
          break;
        case 16:
          cout << "Applying rule: DoubleNegationE" << endl;
          applyDoubleNegationE(goals[0]);
          break;
        case 17:
          cout << "Applying rule: Contradiction" << endl;
          applyContradiction(goals[0]);
          break;
      };
    };
  };

  if(exit)
    cout << "Exiting..." << endl;
  else
    cout << endl << "Theorem proved: " << f << endl;

  return 0;
}